# Jornal Web

Jornal Web é uma aplicação web desenvolvida para gerenciar notícias, permitindo que usuários autenticados criem, visualizem e gerenciem notícias. O projeto utiliza uma arquitetura backend baseada em Node.js e Prisma para manipulação do banco de dados, com suporte a interações sociais como likes e comentários.

---

## **Tecnologias Utilizadas**

- **Node.js**: Plataforma para execução do JavaScript no servidor.
- **Express.js**: Framework para criação de APIs REST.
- **Prisma**: ORM para interação com o banco de dados.
- **MySQL**: Sistema de gerenciamento de banco de dados relacional.
- **JWT (JSON Web Token)**: Para autenticação e autorização de usuários.
- **Bcrypt**: Para hash de senhas.
- **Dotenv**: Gerenciamento de variáveis de ambiente.
- **Nodemon**: Para reinicialização automática do servidor durante o desenvolvimento.

---

## **Funcionalidades**

### **Autenticação**
- Login de usuários com validação de email e senha.
- Geração de JWT no login para autenticação de rotas protegidas.
- Registro de novos usuários com validação de dados.

### **Gerenciamento de Usuários**
- Criação e atualização de perfis de usuário.
- Opção para personalizar avatar e background.
- Gerenciamento de senhas com criptografia segura.

### **Gerenciamento de Notícias**
- Criação de notícias associadas ao usuário autenticado.
- Paginação e ordenação de notícias.
- Busca de notícias por título.
- Visualização de notícias mais recentes.
- Filtragem de notícias por usuário.
- Atualização e exclusão de notícias pelo autor.

### **Interações Sociais**
- Sistema de likes nas notícias (adicionar/remover).
- Sistema de comentários nas notícias.
- Possibilidade de excluir comentários próprios.

### **Middleware de Autenticação**
- Validação do JWT enviado no cabeçalho `Authorization`.
- Extração do `userId` do token para uso nas rotas protegidas.

---

## **Estrutura do Projeto**

```plaintext
backend/
├── index.js                    # Ponto de entrada da aplicação
├── package.json                # Dependências do projeto
├── src/
│   ├── controllers/
│   │   ├── auth.controller.js  # Controlador de autenticação
│   │   ├── news.controller.js  # Controlador de notícias
│   │   ├── users.controller.js # Controlador de usuários
│   ├── database/
│   │   ├── bd.js               # Configuração do Prisma e conexão ao banco
│   ├── middlewares/
│   │   ├── auth.middleware.js  # Middleware para validação de JWT
│   │   ├── users.middleware.js # Middleware para validação de usuários
│   ├── prisma/
│   │   ├── schema.prisma       # Esquema do banco de dados
│   │   ├── migrations/         # Migrações do banco de dados
│   ├── routes/
│   │   ├── auth.route.js       # Rotas de autenticação
│   │   ├── news.route.js       # Rotas de notícias
│   │   ├── users.route.js      # Rotas de usuários
│   ├── services/
│   │   ├── auth.service.js     # Lógica de autenticação
│   │   ├── news.service.js     # Lógica de gerenciamento de notícias
│   │   ├── users.service.js    # Lógica de gerenciamento de usuários
│   ├── utils/
│   │   ├── jwt.utils.js        # Função para geração de tokens JWT
```

---

## **Modelo de Dados**

### **Usuários (Users)**
```prisma
model Users{
  id         Int      @id @default(autoincrement())
  name       String
  username   String   
  email      String   @unique
  password   String
  avatar     String?  // Opcional
  background String?  // Opcional
  createdAt  DateTime @default(now())
  news       News[]   // Relação com notícias
}
```

### **Notícias (News)**
```prisma
model News{
  id        Int      @id @default(autoincrement())
  title     String
  text      String
  banner    String
  likes     Json?    @default("[]") // Array de likes
  comments  Json?    @default("[]") // Array de comentários
  createdAt DateTime @default(now())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
}
```

---

## **Configuração do Projeto**

### **Pré-requisitos**
- Node.js instalado na máquina.
- MySQL ou outro banco de dados compatível com Prisma.

### **Passos para Configuração**
1. Clone o repositório:
   ```bash
   git clone https://github.com/luisduarte04/Jornal-web.git
   ```

2. Instale as dependências:
   ```bash
   cd backend
   npm install
   ```

3. Configure as variáveis de ambiente:
   - Crie um arquivo `.env` na raiz do projeto e adicione as seguintes variáveis:
     ```env
     JWT=seu_segredo_jwt
     DATABASE_URL=mysql://usuario:senha@localhost:3306/nome_do_banco
     ```

4. Execute as migrações do Prisma:
   ```bash
   npx prisma migrate dev
   ```

5. Inicie o servidor:
   ```bash
   npm run dev
   ```

---

## **Uso da API**

### **Rotas Disponíveis**

#### **Autenticação**
- **POST /auth/login**: Realiza o login do usuário e retorna um JWT.
  - **Body**:
    ```json
    {
      "email": "usuario@email.com",
      "password": "senha"
    }
    ```

- **POST /auth/register**: Registra um novo usuário.
  - **Body**:
    ```json
    {
      "name": "Nome Completo",
      "username": "nome_usuario",
      "email": "usuario@email.com",
      "password": "senha"
    }
    ```

#### **Usuários**
- **GET /users/:id**: Obtém informações de um usuário específico.
- **PATCH /users/:id**: Atualiza informações do usuário (rota protegida).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

#### **Notícias**
- **GET /news**: Retorna uma lista de notícias com paginação.
  - **Query Params**:
    - `limit`: Número de notícias por página.
    - `offset`: Posição inicial para paginação.

- **GET /news/top**: Retorna a notícia mais recente.

- **GET /news/search**: Busca notícias por título.
  - **Query Params**:
    - `title`: Termo de busca para o título da notícia.

- **GET /news/byUser**: Retorna notícias do usuário autenticado (rota protegida).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

- **GET /news/:id**: Retorna uma notícia específica por ID.

- **POST /news**: Cria uma nova notícia (rota protegida).
  - **Headers**:
    - `Authorization`: `Bearer <token>`
  - **Body**:
    ```json
    {
      "title": "Título da notícia",
      "text": "Conteúdo da notícia",
      "banner": "URL do banner"
    }
    ```

- **PATCH /news/:id**: Atualiza uma notícia (rota protegida, apenas autor).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

- **DELETE /news/:id**: Remove uma notícia (rota protegida, apenas autor).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

#### **Interações**
- **PATCH /news/like/:id**: Adiciona ou remove um like em uma notícia (rota protegida).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

- **PATCH /news/comment/:id**: Adiciona um comentário em uma notícia (rota protegida).
  - **Headers**:
    - `Authorization`: `Bearer <token>`
  - **Body**:
    ```json
    {
      "comment": "Texto do comentário"
    }
    ```

- **DELETE /news/:id/comment/:idComment**: Remove um comentário de uma notícia (rota protegida, apenas autor).
  - **Headers**:
    - `Authorization`: `Bearer <token>`

---

## **Considerações Finais**

Este projeto foi desenvolvido com foco em boas práticas de autenticação e gerenciamento de dados. O uso de JWT garante segurança e escalabilidade, enquanto o Prisma simplifica a interação com o banco de dados.

A aplicação oferece uma API completa para gerenciamento de notícias com recursos sociais como likes e comentários, além de um sistema robusto de autenticação e autorização.

Contribuições são bem-vindas! Sinta-se à vontade para abrir issues ou enviar pull requests no repositório.

---

**Autor**: [Luis Duarte](https://github.com/luisduarte04)
**Atualizado**: Setembro 2025
